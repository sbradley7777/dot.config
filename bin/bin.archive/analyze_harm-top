#!/usr/bin/env python3
"""
The script parses top data collected in a file by the script ha-resourcemon.
  - https://access.redhat.com/solutions/368393


NOTES:
* For best results then use a black background and white (or green) foreground.
* We cannot filter out processes that in state "sleep" or "idle" because some of those processes are consuming a lot of
  resources and you want to see that information.

@author    : Shane Bradley
@contact   : sbradley@redhat.com
@version   : 0.1
@copyright : GPLv2
"""
import argparse
import locale
import logging
import logging.handlers
import os
import os.path
import sys
import textwrap
from datetime import datetime

# #####################################################################
# Global vars:
# #####################################################################
VERSION_NUMBER = '0.1-1'
MAIN_LOGGER_NAME = '%s' % (os.path.basename(sys.argv[0]))
# The date format used in the file before each iteration of the data.
DT_FORMAT_FILE_CONTENTS = '%Y%m%d %H:%M:%S'
# The format used to display the date.
DT_FORMAT_OUTPUT = '%Y-%m-%d %H:%M:%S'


# #####################################################################
# Helper File Functions
# ####################################################################
def get_data_from_file(path_to_filename) :
    lines = get_data_from_file_as_list(path_to_filename)
    if lines is not None:
        data = ''
        for line in lines:
            data = '%s%s' % (data, line)
        return data
    return None


def get_data_from_file_as_list(path_to_filename) :
    if len(path_to_filename) > 0 :
        try:
            with open(path_to_filename, 'r', encoding='utf-8') as fin:
                lines = fin.readlines()
                fin.close()
            data = []
            for line in lines:
                line = line.strip()
                if len(line) > 0:
                    data.append(line.strip())
            return data
        except (IOError, os.error):
            logging.getLogger(MAIN_LOGGER_NAME).error('An error occured reading the file: %s.' % (path_to_filename))
    return None


def truncate_rows(rows, max_item_length=70):
    # This function will take a list of lists and remove any whitespaces at start or end of items in each list. It will also
    # truncate any item that is longer than max_item_length and will insert into new rows the text longer than max_item_length.
    rows_copy = []
    for row in rows:
        new_row = []
        for i in row:
            try:
                # Strip out any white spaces when copying the list into a new list.
                new_row.append(i.strip())
            except AttributeError:
                new_row.append(i)
        rows_copy.append(new_row)
    rindex = 0
    for row in rows_copy:
        iindex = 0
        index_with_long_lines = {}
        for item in row:
            if len(str(item)) > max_item_length:
                index_with_long_lines[iindex] = textwrap.wrap(str(item), max_item_length, break_long_words=False)
            iindex += 1
        for key in index_with_long_lines:
            # Modify the current and change to the shorten version.
            row[key] = index_with_long_lines.get(key).pop(0)
        # Look over what is left and add new row. Could have multiple items in new row.
        insert_after_row = rindex + 1
        while index_with_long_lines:
            new_row = ['-'] * (len(row))
            for key in list(index_with_long_lines.keys()):
                # If there is item in list then add to new row.  if the list is empty then remove they key.
                items = index_with_long_lines.get(key)
                if items:
                    new_row[key] = index_with_long_lines.get(key).pop(0)
                    if not items:
                        # Delete the key if nothing is in list.
                        del index_with_long_lines[key]
            if new_row:
                rows_copy.insert(insert_after_row, new_row)
                insert_after_row += 1
        # Increment the row index
        rindex += 1
    return rows_copy


def tableize(rows, header):
    """
    Prints out a table using the data in `rows`, which is assumed to be a
    sequence of sequences with the 0th element being the header.
    https://gist.github.com/lonetwin/4721748
    """
    # Formatted string of table data returned.
    formatted_table = ''
    if not rows:
        return formatted_table

    # Truncate any data in columns.
    rows_copy = truncate_rows(rows)
    # Insert the header
    rows_copy.insert(0, header)

    def __format_item(item):
        locale.setlocale(locale.LC_NUMERIC, '')
        try:
            return str(item)
        except UnicodeEncodeError:
            return item.encode('utf-8')

    # Convert all values in rows to strings.
    if len(rows_copy) > 0:
        converted_rows_to_str = []
        for row in rows_copy:
            current_row = []
            for item in row:
                current_row.append(__format_item(item))
            if len(current_row) > 0:
                converted_rows_to_str.append(current_row)
        # Figure out each column widths which is max column size for all rows.
        widths = [len(max(columns, key=len)) for columns in zip(*converted_rows_to_str)]
        # Add seperator
        formatted_table += '-+-'.join('-' * width for width in widths) + '\n'
        # Add the header
        header, data = converted_rows_to_str[0], converted_rows_to_str[1:]
        formatted_table += ' | '.join(format(title, '%ds' % width)for width, title in zip(widths, header)) + '\n'
        # Add seperator from first row and header.
        formatted_table += '-+-'.join('-' * width for width in widths) + '\n'
        count = 0
        for row in data:
            row_string = ' | '.join(format(cdata, '%ds' % width) for width, cdata in zip(widths, row))
            if not row_string.startswith('-'):
                count = count + 1
            formatted_table += row_string + '\n'
    return formatted_table


def __print_colorize_table(tfrmt):
    index = 1
    for line in tfrmt.split('\n'):
        if index == 2 or (((index % 2) != 0) and (not line.startswith('-'))):
            line = __colorize_line_background(line)
        print(line)
        index += 1


def __colorize_line_background(text):
    # Dark Gray = 100
    # Light Blue = 104
    # - http://misc.flogisoft.com/bash/tip_colors_and_formatting
    color_id = '40;100'
    opencol = '\033['
    closecol = 'm'
    color = opencol + color_id + closecol
    return '%s%s%s' % (color, text, opencol + '0' + closecol)


def __colorize_line_foreground(text):
    # Red = 31
    color_id = '31'
    opencol = '\033[1;'
    closecol = 'm'
    color = opencol + color_id + closecol
    return '%s%s%s' % (color, text, opencol + '0' + closecol)


# ##############################################################################
# Parse and print data
# ##############################################################################
def __bytes_to_human(size, format='%(value).1f%(symbol)s'):  # pylint: disable=W0622
    # - https://github.com/giampaolo/pyftpdlib/blob/master/scripts/ftpbench#L140
    # - https://code.activestate.com/recipes/578019-bytes-to-human-human-to-bytes-converter/
    if not size.isdigit():
        size = __to_bytes(size)
    symbols = ('B', 'K', 'M', 'G', 'T', 'P', 'E', 'Z', 'Y')
    prefix = {}
    for index, symbol in enumerate(symbols[1:]):
        prefix[symbol] = 1 << (index + 1) * 10
    for symbol in reversed(symbols[1:]):
        if size >= prefix[symbol]:
            value = float(size) / prefix[symbol]  # pylint: disable=W0641
            return format % locals()
    return format % dict(symbol=symbols[0], value=size)


def __to_bytes(size):
    symbols = ('B', 'K', 'M', 'G', 'T', 'P', 'E', 'Z', 'Y')
    letter = size[-1:].strip().upper()
    num = size[:-1].split('.')[0]
    assert num.isdigit() and letter in symbols, size
    num = float(num)
    prefix = {symbols[0]: 1}
    for index, symbol in enumerate(symbols[1:]):
        prefix[symbol] = 1 << (index + 1) * 10
    return int(num * prefix[letter])


def __get_preamble_map(preamble):
    preamble_map = {}
    # Print preamble data and top rows
    preamble_map['load average'] = preamble[0].split('load average:')[1]
    preamble_map['cpu_idle'] = preamble[2].split(', ')[3]
    # The mem output comes in different versions:
    #   Mem:  32832244k total, 21954424k used, 10877820k free,   852872k buffers
    #   KiB Mem : 79230297+total, 22083852+free,  5549860 used, 56591456+buff/cache
    mem_total = __bytes_to_human('%sK' % (preamble[3].split(': ')[1].split()[0].split('+')[0].replace('k', '')))
    mem_free = __bytes_to_human('%sK' % (preamble[3].split('free')[0].strip().rsplit(' ', 1)[1].replace('k', '').replace('+', '')))
    if preamble[3].split(': ')[0].startswith('MiB Mem'):
        # MiB Mem :  31888.0 total,    366.7 free,  29502.6 used,   2018.7 buff/cache
        mem_total = __bytes_to_human('%sM' % (preamble[3].split(': ')[1].split()[0].split('+')[0]))
        mem_free = __bytes_to_human('%sM' % (preamble[3].split('free')[0].strip().rsplit(' ', 1)[1]))
    preamble_map['mem_free'] = '%s | Memory Total: %s' % (mem_free, mem_total)
    # The swap output comes in different versions:
    #   Swap:  2088956k total,        0k used,  2088956k free,  1820752k cached
    #   KiB Swap: 16777212 total, 16777212 free,        0 used. 78353670+avail Mem
    preamble_map['swap_used'] = __bytes_to_human('%sK' % (preamble[4].split('used')[0].strip().rsplit(' ', 1)[1].replace('k', '').replace('+', '')))
    return preamble_map


def print_top(hostname, top_chunks, number_of_processes):
    # The file is sorted into bins to capture all top data captured at specific time.
    tkeys = list(top_chunks.keys())
    tkeys.sort()
    header = []
    # Go through all the data.
    for ts_key in tkeys:
        timestamp = ts_key.strftime(DT_FORMAT_OUTPUT)
        lines = top_chunks.get(ts_key)
        # Build the header and preamble
        preamble = []
        header = ['timestamp']
        # The first six lines is header and column names.
        for index in range(0, 6):
            line = lines.pop(0)
            if line.startswith('PID'):  # pylint: disable=R1723
                header += line.split()
                break
            elif len(line) > 0:
                preamble.append(line)
        preamble_map = __get_preamble_map(preamble)
        header += ['load average', 'cpu_idle', 'mem_free', 'swap_used']
        # Create data structure for the pid rows.
        pid_rows = []
        # The first 6 lines we can skip.
        for index in range(0, number_of_processes):
            line = lines[index].strip()
            if not line:
                continue
            row = [str(timestamp)] + line.split()
            if len(row) > 13:
                # In a normal split there will be 13 columns (including timestamp). In the event there is more than 13 columns
                # then we want to create a string out of the 13 to n columns. The 13th column contains the command.
                modrow = []
                for i in range(0, 12):  # pylint: disable=W0612
                    modrow.append(row.pop(0))
                modrow.append(' '.join(row))
                row = modrow
            row += [preamble_map['load average'], preamble_map['cpu_idle'], preamble_map['mem_free'], preamble_map['swap_used']]
            pid_rows.append(row)
        print(__colorize_line_foreground('%s @%s | Number of matching processes: %d' % (ts_key,
                                                                                        hostname,
                                                                                        len(pid_rows))))
        print(__colorize_line_foreground('Load Average: %s | CPU idle: %s | Memory Free: %s | Swap Used: %s' % (preamble_map['load average'],
                                                                                                                preamble_map['cpu_idle'],
                                                                                                                preamble_map['mem_free'],
                                                                                                                preamble_map['swap_used'])))
        tfrmt = tableize(pid_rows, header)
        __print_colorize_table(tfrmt)


# ##############################################################################
# Get user selected options
# ##############################################################################
def __get_options() :
    epilog = ''
    parseargs_ns = argparse.ArgumentParser(prog=os.path.basename(__file__),
                                           description='The script outputs formatted top output generated ha-resourcemon',
                                           epilog=epilog,
                                           formatter_class=argparse.RawDescriptionHelpFormatter)
    parseargs_ns.add_argument('-d', '--debug',
                              action='store_true',
                              dest='enable_debug',
                              help='enables debug logging',
                              default=False)
    parseargs_ns.add_argument('-q', '--quiet',
                              action='store_true',
                              dest='disable_logging',
                              help='disables logging to console',
                              default=False)
    parseargs_ns.add_argument('-p', '--path_to_filename',
                              action='store',
                              dest='path_to_src_file',
                              help='the path to the filename that will be parsed',
                              type=str,
                              metavar='<input filename>',
                              default='')
    parseargs_ns.add_argument('-n', '--number_of_processes',
                              action='store',
                              dest='number_of_processes',
                              help='the number of processes that will be printed',
                              type=int,
                              metavar='<number of processes>',
                              default=20)
    return parseargs_ns.parse_args()


# ###############################################################################
# Main Function
# ###############################################################################
def main():
    # #######################################################################
    # Get the options from the commandline.
    # #######################################################################
    parseargs_ns = __get_options()
    # #######################################################################
    # Setup the logger and create config directory
    # #######################################################################
    # Create the logger
    log_level = logging.INFO
    logger = logging.getLogger(MAIN_LOGGER_NAME)
    logger.setLevel(log_level)
    stream_handler = logging.StreamHandler()
    stream_handler.setLevel(log_level)
    stream_handler.setFormatter(logging.Formatter('%(levelname)s %(message)s'))
    logger.addHandler(stream_handler)
    if parseargs_ns.enable_debug and not parseargs_ns.disable_logging:
        logging.getLogger(MAIN_LOGGER_NAME).setLevel(logging.DEBUG)
        stream_handler.setLevel(logging.DEBUG)
        message = 'Debugging has been enabled.'
        logging.getLogger(MAIN_LOGGER_NAME).debug(message)
    if parseargs_ns.disable_logging:
        stream_handler.setLevel(logging.CRITICAL)

    # #######################################################################
    # Check options
    # #######################################################################
    if not parseargs_ns.path_to_src_file:
        message = 'A path to the file is required with the -p option.'
        logging.getLogger(MAIN_LOGGER_NAME).error(message)
        sys.exit(1)
    elif not os.path.isfile(parseargs_ns.path_to_src_file):
        message = 'The path does not exist or is not a file: %s' % (parseargs_ns.path_to_src_file)
        logging.getLogger(MAIN_LOGGER_NAME).error(message)
        sys.exit(1)

    # #######################################################################
    # Check options
    # #######################################################################
    if not parseargs_ns.path_to_src_file:
        message = 'A path to the file is required with the -p option.'
        logging.getLogger(MAIN_LOGGER_NAME).error(message)
        sys.exit(1)
    elif not os.path.isfile(parseargs_ns.path_to_src_file):
        message = 'The path does not exist or is not a file: %s' % (parseargs_ns.path_to_src_file)
        logging.getLogger(MAIN_LOGGER_NAME).error(message)
        sys.exit(1)

    # #######################################################################
    # Run main
    # #######################################################################
    message = 'Analyzing the file: %s' % (parseargs_ns.path_to_src_file)
    logging.getLogger(MAIN_LOGGER_NAME).debug(message)
    # filename: node42-20170820-230101-info-top.log
    split_filename = parseargs_ns.path_to_src_file.rsplit('-', 4)
    hostname = os.path.basename(parseargs_ns.path_to_src_file).rsplit('-', 4)[0]
    date = split_filename[1]
    hour = split_filename[2][:2]
    # Need to only capture data within that hour.
    top_chunks = {}
    last_timestamp = ''
    for line in get_data_from_file_as_list(parseargs_ns.path_to_src_file):
        if line.startswith('top - '):
            timestamp = line.split()[2]
            date_time = datetime.strptime('%s %s' % (date, timestamp), DT_FORMAT_FILE_CONTENTS)
            if hour == date_time.strftime('%H'):
                last_timestamp = date_time
                top_chunks[last_timestamp] = []
            else:
                last_timestamp = ''
        if last_timestamp:
            top_chunks[last_timestamp].append(line)
    # Print all the iterations.
    print_top(hostname, top_chunks, parseargs_ns.number_of_processes)


# ###############################################################################
# Main Function
# ###############################################################################
if __name__ == '__main__':
    try:
        main()
    except KeyboardInterrupt:
        print('')
        logging.getLogger(MAIN_LOGGER_NAME).error('This script will exit since control-c was executed by end user.')
        sys.exit(1)
    # #######################################################################
    # Exit the application with zero exit code since we cleanly exited.
    # #######################################################################
    sys.exit()
